package {{$generatedArtifactPackageName}};

import tech.intellispaces.commons.base.exception.NotImplementedExceptions;

{{for importedClass : $importedClasses}}
import {{$importedClass}};
{{end}}

/**
 * Movable downward object handle for objects of domain {@link {{$sourceArtifactSimpleName}}}.
 * <p>
 * This class was generated automatically. Don't try to change it.
 */
@ObjectHandle({{$domainClassSimpleName}}.class)
{{$generatedAnnotation}}
public class {{$generatedArtifactSimpleName}}{{$classTypeParams}} implements {{$movableObjectHandleName}}{{$domainTypeArguments}}, MovableObjectHandle<{{$domainClassSimpleName}}{{$domainTypeArguments}}> {
  private final {{$childObjectHandleType}}{{$classTypeParamsBrief}} {{$childField}};

  public {{$generatedArtifactSimpleName}}({{$childObjectHandleType}}{{$classTypeParamsBrief}} {{$childField}}) {
    this.{{$childField}} = {{$childField}};
  }

{{when $isAlias}}
  @Override
  public Type<{{$domainClassSimpleName}}{{$domainTypeArguments}}> domain() {
    return {{$domainType}}
  }

  @Override
  public Class<{{$domainClassSimpleName}}> domainAsClass() {
    return {{$domainClassSimpleName}}.class;
  }
{{else}}
{{when $domainTypeParamsBrief.isEmpty()}}
  @Override
  public Type<{{$parentDomainClassSimpleName}}> domain() {
    return Types.get({{$parentDomainClassSimpleName}}.class);
  }
{{else}}
  @Override
  public Type<{{$parentDomainClassSimpleName}}{{$domainTypeParamsBrief}}> domain() {
    return {{$domainType}}
  }
{{end}}
  @Override
  public Class<{{$domainClassSimpleName}}> domainAsClass() {
    return {{$domainClassSimpleName}}.class;
  }
{{end}}
{{end}}

  @Override
  public boolean isMovable() {
    return true;
  }

  @Override
  public MovableObjectHandle<{{$domainClassSimpleName}}{{$domainTypeArguments}}> asMovableOrElseThrow() {
    return this;
  }

  @Override
  public boolean isFocused() {
    return true;
  }

{{for method : $methods}}
  {{$method."javadoc"}}
  @Override
  {{$method."declaration"}};

{{end}}

  @Override
  public void release() {
    ObjectHandles.handle({{$childField}}, {{$sourceArtifactSimpleName}}.class).release();
  }

  @Override
  public <T, Q, C extends Channel1 & MappingTraverse> T mapThru(Class<C> channelClass, Q qualifier) throws TraverseException {
    return (T) ObjectHandles.handle({{$childField}}, {{$sourceArtifactSimpleName}}.class).mapThru(channelClass, qualifier);
  }

  @Override
  public <Q> MovableObjectHandle<{{$domainClassSimpleName}}{{$domainTypeArguments}}> moveThru(java.lang.String cid, Q qualifier) throws TraverseException {
    throw NotImplementedExceptions.withCode("U4Y1FQ");
    // {{$childField}}.moveThru(cid, qualifier);
    // return this;
  }

{{when $isAlias}}
  @Override
  public MovableObjectHandle<{{$domainClassSimpleName}}{{$domainTypeArguments}}> moveThru(ChannelFunction0<{{$domainClassSimpleName}}{{$domainTypeArguments}}, {{$domainClassSimpleName}}{{$domainTypeArguments}}> channelFunction) throws TraverseException {
    throw NotImplementedExceptions.withCode("k97y5g");
    // {{$childField}}.moveThru(channelFunction);
    // return this;
  }

  @Override
  public <Q> MovableObjectHandle<{{$domainClassSimpleName}}{{$domainTypeArguments}}> moveThru(ChannelFunction1<{{$domainClassSimpleName}}{{$domainTypeArguments}}, {{$domainClassSimpleName}}{{$domainTypeArguments}}, Q> channelFunction, Q qualifier) throws TraverseException {
    throw NotImplementedExceptions.withCode("hQ8C8A");
    // {{$childField}}.moveThru(channelFunction, qualifier);
    // return this;
  }
{{else}}
  @Override
  public MovableObjectHandle<{{$domainClassSimpleName}}{{$domainTypeArguments}}> moveThru(ChannelFunction0<{{$domainClassSimpleName}}{{$domainTypeArguments}}, {{$domainClassSimpleName}}{{$domainTypeArguments}}> channelFunction) throws TraverseException {
    throw NotImplementedExceptions.withCode("zniMxQ");
    // {{$childField}}.moveThru(channelFunction);
    // return this;
  }

  @Override
  public <Q> MovableObjectHandle<{{$domainClassSimpleName}}{{$domainTypeArguments}}> moveThru(ChannelFunction1<{{$domainClassSimpleName}}{{$domainTypeArguments}}, {{$domainClassSimpleName}}{{$domainTypeArguments}}, Q> channelFunction, Q qualifier) throws TraverseException {
    throw NotImplementedExceptions.withCode("A2IHpg");
    // {{$childField}}.moveThru(channelFunction, qualifier);
    // return this;
  }
{{end}}

  @Override
  public MovableObjectHandle<{{$domainClassSimpleName}}{{$domainTypeArguments}}> moveThru(Class<? extends Channel0> channelClass) throws TraverseException {
    throw NotImplementedExceptions.withCode("EfXZCg");
    // {{$childField}}.moveThru(channelClass);
    // return this;
  }

  @Override
  public <Q> MovableObjectHandle<{{$domainClassSimpleName}}{{$domainTypeArguments}}> moveThru(Class<? extends Channel1> channelClass, Q qualifier) throws TraverseException {
    throw NotImplementedExceptions.withCode("8SdVYg");
    // {{$childField}}.moveThru(channelClass, qualifier);
    // return this;
  }

  @Override
  public <R, Q> R mapOfMovingThru(java.lang.String cid, Q qualifier) throws TraverseException {
    return (R) ObjectHandles.movableHandle({{$childField}}, {{$sourceArtifactSimpleName}}.class).mapOfMovingThru(cid, qualifier);
  }

{{when $isAlias}}
  @Override
  public <R> R mapOfMovingThru(ChannelFunction0<{{$domainClassSimpleName}}{{$domainTypeArguments}}, R> channelFunction) throws TraverseException {
    throw NotImplementedExceptions.withCode("");
    // return (R) {{$childField}}.mapOfMovingThru(channelFunction);
  }

  @Override
  public <R, Q> R mapOfMovingThru(ChannelFunction1<{{$domainClassSimpleName}}{{$domainTypeArguments}}, R, Q> channelFunction, Q qualifier) throws TraverseException {
    throw NotImplementedExceptions.withCode("");
    // return (R) {{$childField}}.mapOfMovingThru(channelFunction, qualifier);
  }
{{else}}
  @Override
  public <R> R mapOfMovingThru(ChannelFunction0<{{$domainClassSimpleName}}{{$domainTypeArguments}}, R> channelFunction) throws TraverseException {
    throw NotImplementedExceptions.withCode("");
    // return (R) {{$childField}}.mapOfMovingThru(channelFunction);
  }

  @Override
  public <R, Q> R mapOfMovingThru(ChannelFunction1<{{$domainClassSimpleName}}{{$domainTypeArguments}}, R, Q> channelFunction, Q qualifier) throws TraverseException {
    throw NotImplementedExceptions.withCode("");
    // return (R) {{$childField}}.mapOfMovingThru(channelFunction, qualifier);
  }
{{end}}

  @Override
  public <TD, TH> void addProjection(Class<TD> targetDomain, TH target) {
    ObjectHandles.handle({{$childField}}, {{$sourceArtifactSimpleName}}.class).addProjection(targetDomain, target);
  }

  @Override
  public <TD, TH> TH mapTo(Class<TD> targetDomain) {
    return ObjectHandles.handle({{$childField}}, {{$sourceArtifactSimpleName}}.class).mapTo(targetDomain);
  }

  @Override
  public <R> R mapOfMovingThru(Class<? extends Channel0> channelClass) throws TraverseException {
    return (R) ObjectHandles.movableHandle({{$childField}}, {{$sourceArtifactSimpleName}}.class).mapOfMovingThru(channelClass);
  }

  @Override
  public <R, Q, C extends Channel1 & MappingOfMovingTraverse> R mapOfMovingThru(Class<C> channelClass, Q qualifier) throws TraverseException {
    return (R) ObjectHandles.movableHandle({{$childField}}, {{$sourceArtifactSimpleName}}.class).mapOfMovingThru(channelClass, qualifier);
  }
}

package {{$generatedArtifactPackageName}};

{{for importedClass : $importedClasses}}
import {{$importedClass}};
{{end}}

/**
 * Unmovable downward object handle for objects of domain {@link {{$sourceArtifactSimpleName}}}.<p/>
 *
 * This class was generated automatically. Don't try to change it.
 */
@ObjectHandle({{$sourceArtifactSimpleName}}.class)
{{$generatedAnnotation}}
public class {{$generatedArtifactSimpleName}}{{$classTypeParams}} implements {{$unmovableObjectHandleName}}{{$domainTypeArguments}} {
  private final {{$childObjectHandleType}}{{$classTypeParamsBrief}} {{$childField}};

  public {{$generatedArtifactSimpleName}}({{$childObjectHandleType}}{{$classTypeParamsBrief}} {{$childField}}) {
    this.{{$childField}} = {{$childField}};
  }

{{when $isAlias}}
  @Override
  public Type<{{$primaryDomainSimpleName}}{{$domainTypeArguments}}> domain() {
    return {{$domainType}}
  }

  @Override
  public Class<?> domainAsClass() {
    return {{$domainClassSimpleName}}.class;
  }
{{else}}
{{when $domainTypeParamsBrief.isEmpty()}}
  @Override
  public Type<{{$parentDomainClassSimpleName}}> domain() {
    return Types.get({{$parentDomainClassSimpleName}}.class);
  }

  @Override
  public Class<?> domainAsClass() {
    return {{$domainClassSimpleName}}.class;
  }
{{else}}
  @Override
  public Type<{{$parentDomainClassSimpleName}}{{$domainTypeParamsBrief}}> domain() {
    return {{$domainType}}
  }
{{end}}
{{end}}
{{end}}

{{for method : $methods}}
  {{$method."javadoc"}}
  @Override
  {{$method."declaration"}};

{{end}}

{{for method : $movableMethods}}
  @Override
  @Deprecated
  public {{$method."signature"}} {
    throw TraverseExceptions.withMessage("Unable to move the unmovable object handle");
  }

{{end}}
  @Override
  public void release() {
    {{$childField}}.release();
  }

  @Override
  public <TD, TH> void addProjection(Class<TD> targetDomain, TH target) {
    {{$childField}}.addProjection(targetDomain, target);
  }

  @Override
  public <TD, TH> TH mapTo(Class<TD> targetDomain) {
    return {{$childField}}.mapTo(targetDomain);
  }

  @Override
  public <T, Q, C extends Channel1 & MappingChannel> T mapThru(Class<C> channelClass, Q qualifier) throws TraverseException {
    return (T) {{$childField}}.mapThru(channelClass, qualifier);
  }
}

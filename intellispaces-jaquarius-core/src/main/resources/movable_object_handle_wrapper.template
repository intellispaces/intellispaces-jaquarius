package {{$packageName}};

{{for importedClass : $importedClasses}}
import {{$importedClass}};
{{end}}

/**
 * This class was generated automatically. Don't try to change it.
 */
@Wrapper({{$sourceClassSimpleName}}.class)
{{$generatedAnnotation}}
public class {{$classSimpleName}}{{$typeParamsFull}} extends {{$sourceClassSimpleName}}{{$typeParamsBrief}} implements ObjectHandleWrapper {
  private InnerObjectHandle $innerHandle;

{{for constructor : $constructors}}
  public {{$classSimpleName}}({{for param : $constructor.get("params")}}{{$param.get("type")}} {{$param.get("name")}}{{when $param.isNotLast()}}, {{end}}{{end}}) {
    super({{for param : $constructor.get("params")}}{{$param.get("name")}}{{when $param.isNotLast()}},{{end}}{{end}});
    KernelFunctions.currentModule().objectRegistry().add(this);
  }
{{end}}

  @Override
  public void $init(InnerObjectHandle innerHandle) {
    this.$innerHandle = innerHandle;
{{when $injections.isNotEmpty()}}
    this.$innerHandle.setInjections(
{{for injection : $injections}}
{{when $injection.get("kind").eq("guide")}}
      GuideInjections.get({{$sourceClassSimpleName}}.class, "{{$injection.get("name")}}", {{$injection.get("type")}}.class){{when $injection.isNotLast()}},{{end}}
{{else}}
      AutoGuideInjections.get({{$sourceClassSimpleName}}.class, "{{$injection.get("name")}}", {{$injection.get("type")}}.class){{when $injection.isNotLast()}},{{end}}
{{end}}
{{end}}
    );
{{end}}
{{when $methodActions.isNotEmpty()}}
    this.$innerHandle.setMethodActions(
{{for methodAction : $methodActions}}
      {{$methodAction}}{{when $methodAction.isNotLast()}},{{end}}
{{end}}
    );
{{end}}
{{when $guideActions.isNotEmpty()}}
    this.$innerHandle.setGuideActions(
{{for guideAction : $guideActions}}
      {{$guideAction}}{{when $guideAction.isNotLast()}},{{end}}
{{end}}
    );
{{end}}
  }

  @Override
  public InnerObjectHandle $innerHandle() {
    return this.$innerHandle;
  }

{{for method : $conversionMethods}}
  {{$method.get("declaration")}};

{{end}}
{{for method : $domainMethods}}
  @Override
  {{$method.get("declaration")}};

{{end}}
{{for method : $guideActionMethods}}
  {{$method.get("declaration")}};

{{end}}
{{when $notImplRelease}}
  @Override
  public void release() {
    // do nothing
  }
{{end}}

  @Override
  public <TD, TH> void addProjection(Class<TD> targetDomain, TH target) {
    $innerHandle.addProjection(targetDomain, target);
  }

  @Override
  public <TD, TH> TH mapTo(Class<TD> targetDomain) {
    return $innerHandle.mapTo(targetDomain);
  }

  @Override
  public <T, Q, C extends Channel1 & MappingChannel> T mapThru(Class<C> channelClass, Q qualifier) throws TraverseException {
    return Modules.current().mapThruChannel1(this, channelClass, qualifier);
  }

  @Override
  public <Q> {{$sourceClassSimpleName}} moveThru(String cid, Q qualifier) throws TraverseException {
    return Modules.current().moveThruChannel1(this, cid, qualifier);
  }

{{when $isAlias}}
  @Override
  public {{$sourceClassSimpleName}} moveThru(ChannelMethod0<? super {{$primaryDomainSimpleName}}{{$primaryDomainTypeArguments}}, ? super {{$primaryDomainSimpleName}}{{$primaryDomainTypeArguments}}> channelMethod) throws TraverseException {
    String cid = ChannelFunctions.getChannelId({{$domainClassSimpleName}}.class, channelMethod);
    return Modules.current().moveThruChannel0(this, cid);
  }

  @Override
  public <Q> {{$sourceClassSimpleName}} moveThru(ChannelMethod1<? super {{$primaryDomainSimpleName}}{{$primaryDomainTypeArguments}}, ? super {{$primaryDomainSimpleName}}{{$primaryDomainTypeArguments}}, Q> channelMethod, Q qualifier) throws TraverseException {
    String cid = ChannelFunctions.getChannelId({{$domainClassSimpleName}}.class, channelMethod, null);
    return Modules.current().moveThruChannel1(this, cid, qualifier);
  }
{{else}}
  @Override
  public {{$sourceClassSimpleName}} moveThru(ChannelMethod0<? super {{$domainClassSimpleName}}{{$typeParamsBrief}}, ? super {{$domainClassSimpleName}}{{$typeParamsBrief}}> channelMethod) throws TraverseException {
    String cid = ChannelFunctions.getChannelId({{$domainClassSimpleName}}.class, channelMethod);
    return Modules.current().moveThruChannel0(this, cid);
  }

  @Override
  public <Q> {{$sourceClassSimpleName}} moveThru(ChannelMethod1<? super {{$domainClassSimpleName}}{{$typeParamsBrief}}, ? super {{$domainClassSimpleName}}{{$typeParamsBrief}}, Q> channelMethod, Q qualifier) throws TraverseException {
    String cid = ChannelFunctions.getChannelId({{$domainClassSimpleName}}.class, channelMethod, null);
    return Modules.current().moveThruChannel1(this, cid, qualifier);
  }
{{end}}

  @Override
  public {{$sourceClassSimpleName}} moveThru(Class<? extends Channel0> channelClass) throws TraverseException {
    String cid = ChannelFunctions.getChannelId(channelClass);
    return Modules.current().moveThruChannel0(this, cid);
  }

  @Override
  public <Q> {{$sourceClassSimpleName}} moveThru(Class<? extends Channel1> channelClass, Q qualifier) throws TraverseException {
    String cid = ChannelFunctions.getChannelId(channelClass);
    return Modules.current().moveThruChannel1(this, cid, qualifier);
  }

  @Override
  public <R, Q> R mapOfMovingThru(String cid, Q qualifier) throws TraverseException {
    throw NotImplementedException.withCode("MzYmFw");
  }

{{when $isAlias}}
  @Override
  public <R> R mapOfMovingThru(ChannelMethod0<? super {{$primaryDomainSimpleName}}{{$primaryDomainTypeArguments}}, R> channelMethod) throws TraverseException {
    throw NotImplementedException.withCode("UjtmNg");
  }

  @Override
  public <R, Q> R mapOfMovingThru(ChannelMethod1<? super {{$primaryDomainSimpleName}}{{$primaryDomainTypeArguments}}, R, Q> channelMethod, Q qualifier) throws TraverseException {
    throw NotImplementedException.withCode("8htd3Q");
  }
{{else}}
  @Override
  public <R> R mapOfMovingThru(ChannelMethod0<? super {{$domainClassSimpleName}}{{$typeParamsBrief}}, R> channelMethod) throws TraverseException {
    throw NotImplementedException.withCode("cuDSAA");
  }

  @Override
  public <R, Q> R mapOfMovingThru(ChannelMethod1<? super {{$domainClassSimpleName}}{{$typeParamsBrief}}, R, Q> channelMethod, Q qualifier) throws TraverseException {
    throw NotImplementedException.withCode("PZX5vA");
  }
{{end}}

  @Override
  public <R> R mapOfMovingThru(Class<? extends Channel0> channelClass) throws TraverseException {
    throw NotImplementedException.withCode("z0PzzQ");
  }

  @Override
  public <R, Q, C extends Channel1 & MappingOfMovingChannel> R mapOfMovingThru(Class<C> channelClass, Q qualifier) throws TraverseException {
    return Modules.current().mapOfMovingThruChannel1(this, channelClass, qualifier);
  }
{{for method : $injectionMethods}}
  {{$method.get("javadoc")}}
{{for annotation : $method.get("annotations")}}
  @{{$annotation}}
{{end}}
  public {{$method.get("signature")}} {
    {{$method.get("body")}}
  }
{{end}}
}
